/*
 * Dac Services
 * Dac Service REST API
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.hf.dac.myfinance.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.hf.dac.myfinance.client.model.Instrument;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.LocalDate;

/**
 * RecurrentTransaction
 */
@javax.annotation.Generated(value = "de.hf.dac.myfinance.codegen.MyFinanceClient_JavaGenerator", date = "2020-11-24T14:07:06.698+01:00")



public class RecurrentTransaction {
  @JsonProperty("recurrenttransactionid")
  private Integer recurrenttransactionid = null;

  @JsonProperty("instrumentByInstrumentid2")
  private Instrument instrumentByInstrumentid2 = null;

  @JsonProperty("instrumentBySecurityid")
  private Instrument instrumentBySecurityid = null;

  @JsonProperty("instrumentByInstrumentid1")
  private Instrument instrumentByInstrumentid1 = null;

  @JsonProperty("recurrencytype")
  private Integer recurrencytype = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("value")
  private Double value = null;

  @JsonProperty("nexttransaction")
  private LocalDate nexttransaction = null;

  @JsonProperty("recurrentfrequenceId")
  private Integer recurrentfrequenceId = null;

  /**
   * Gets or Sets recurrentfrequence
   */
  public enum RecurrentfrequenceEnum {
    MONTHLY("Monthly"),
    
    QUATERLY("Quaterly"),
    
    YEARLY("Yearly"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    RecurrentfrequenceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RecurrentfrequenceEnum fromValue(String text) {
      for (RecurrentfrequenceEnum b : RecurrentfrequenceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("recurrentfrequence")
  private RecurrentfrequenceEnum recurrentfrequence = null;

  public RecurrentTransaction recurrenttransactionid(Integer recurrenttransactionid) {
    this.recurrenttransactionid = recurrenttransactionid;
    return this;
  }

   /**
   * Get recurrenttransactionid
   * @return recurrenttransactionid
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getRecurrenttransactionid() {
    return recurrenttransactionid;
  }

  public void setRecurrenttransactionid(Integer recurrenttransactionid) {
    this.recurrenttransactionid = recurrenttransactionid;
  }

  public RecurrentTransaction instrumentByInstrumentid2(Instrument instrumentByInstrumentid2) {
    this.instrumentByInstrumentid2 = instrumentByInstrumentid2;
    return this;
  }

   /**
   * Get instrumentByInstrumentid2
   * @return instrumentByInstrumentid2
  **/
  @ApiModelProperty(required = true, value = "")
  public Instrument getInstrumentByInstrumentid2() {
    return instrumentByInstrumentid2;
  }

  public void setInstrumentByInstrumentid2(Instrument instrumentByInstrumentid2) {
    this.instrumentByInstrumentid2 = instrumentByInstrumentid2;
  }

  public RecurrentTransaction instrumentBySecurityid(Instrument instrumentBySecurityid) {
    this.instrumentBySecurityid = instrumentBySecurityid;
    return this;
  }

   /**
   * Get instrumentBySecurityid
   * @return instrumentBySecurityid
  **/
  @ApiModelProperty(required = true, value = "")
  public Instrument getInstrumentBySecurityid() {
    return instrumentBySecurityid;
  }

  public void setInstrumentBySecurityid(Instrument instrumentBySecurityid) {
    this.instrumentBySecurityid = instrumentBySecurityid;
  }

  public RecurrentTransaction instrumentByInstrumentid1(Instrument instrumentByInstrumentid1) {
    this.instrumentByInstrumentid1 = instrumentByInstrumentid1;
    return this;
  }

   /**
   * Get instrumentByInstrumentid1
   * @return instrumentByInstrumentid1
  **/
  @ApiModelProperty(required = true, value = "")
  public Instrument getInstrumentByInstrumentid1() {
    return instrumentByInstrumentid1;
  }

  public void setInstrumentByInstrumentid1(Instrument instrumentByInstrumentid1) {
    this.instrumentByInstrumentid1 = instrumentByInstrumentid1;
  }

  public RecurrentTransaction recurrencytype(Integer recurrencytype) {
    this.recurrencytype = recurrencytype;
    return this;
  }

   /**
   * Get recurrencytype
   * @return recurrencytype
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getRecurrencytype() {
    return recurrencytype;
  }

  public void setRecurrencytype(Integer recurrencytype) {
    this.recurrencytype = recurrencytype;
  }

  public RecurrentTransaction description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(required = true, value = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public RecurrentTransaction value(Double value) {
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @ApiModelProperty(required = true, value = "")
  public Double getValue() {
    return value;
  }

  public void setValue(Double value) {
    this.value = value;
  }

  public RecurrentTransaction nexttransaction(LocalDate nexttransaction) {
    this.nexttransaction = nexttransaction;
    return this;
  }

   /**
   * Get nexttransaction
   * @return nexttransaction
  **/
  @ApiModelProperty(required = true, value = "")
  public LocalDate getNexttransaction() {
    return nexttransaction;
  }

  public void setNexttransaction(LocalDate nexttransaction) {
    this.nexttransaction = nexttransaction;
  }

  public RecurrentTransaction recurrentfrequenceId(Integer recurrentfrequenceId) {
    this.recurrentfrequenceId = recurrentfrequenceId;
    return this;
  }

   /**
   * Get recurrentfrequenceId
   * @return recurrentfrequenceId
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getRecurrentfrequenceId() {
    return recurrentfrequenceId;
  }

  public void setRecurrentfrequenceId(Integer recurrentfrequenceId) {
    this.recurrentfrequenceId = recurrentfrequenceId;
  }

  public RecurrentTransaction recurrentfrequence(RecurrentfrequenceEnum recurrentfrequence) {
    this.recurrentfrequence = recurrentfrequence;
    return this;
  }

   /**
   * Get recurrentfrequence
   * @return recurrentfrequence
  **/
  @ApiModelProperty(required = true, value = "")
  public RecurrentfrequenceEnum getRecurrentfrequence() {
    return recurrentfrequence;
  }

  public void setRecurrentfrequence(RecurrentfrequenceEnum recurrentfrequence) {
    this.recurrentfrequence = recurrentfrequence;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecurrentTransaction recurrentTransaction = (RecurrentTransaction) o;
    return Objects.equals(this.recurrenttransactionid, recurrentTransaction.recurrenttransactionid) &&
        Objects.equals(this.instrumentByInstrumentid2, recurrentTransaction.instrumentByInstrumentid2) &&
        Objects.equals(this.instrumentBySecurityid, recurrentTransaction.instrumentBySecurityid) &&
        Objects.equals(this.instrumentByInstrumentid1, recurrentTransaction.instrumentByInstrumentid1) &&
        Objects.equals(this.recurrencytype, recurrentTransaction.recurrencytype) &&
        Objects.equals(this.description, recurrentTransaction.description) &&
        Objects.equals(this.value, recurrentTransaction.value) &&
        Objects.equals(this.nexttransaction, recurrentTransaction.nexttransaction) &&
        Objects.equals(this.recurrentfrequenceId, recurrentTransaction.recurrentfrequenceId) &&
        Objects.equals(this.recurrentfrequence, recurrentTransaction.recurrentfrequence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recurrenttransactionid, instrumentByInstrumentid2, instrumentBySecurityid, instrumentByInstrumentid1, recurrencytype, description, value, nexttransaction, recurrentfrequenceId, recurrentfrequence);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecurrentTransaction {\n");
    
    sb.append("    recurrenttransactionid: ").append(toIndentedString(recurrenttransactionid)).append("\n");
    sb.append("    instrumentByInstrumentid2: ").append(toIndentedString(instrumentByInstrumentid2)).append("\n");
    sb.append("    instrumentBySecurityid: ").append(toIndentedString(instrumentBySecurityid)).append("\n");
    sb.append("    instrumentByInstrumentid1: ").append(toIndentedString(instrumentByInstrumentid1)).append("\n");
    sb.append("    recurrencytype: ").append(toIndentedString(recurrencytype)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    nexttransaction: ").append(toIndentedString(nexttransaction)).append("\n");
    sb.append("    recurrentfrequenceId: ").append(toIndentedString(recurrentfrequenceId)).append("\n");
    sb.append("    recurrentfrequence: ").append(toIndentedString(recurrentfrequence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

