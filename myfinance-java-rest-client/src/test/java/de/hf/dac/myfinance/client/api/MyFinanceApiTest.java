/*
 * Dac Services
 * Dac Service REST API
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.hf.dac.myfinance.client.api;

import io.swagger.client.ApiException;
import de.hf.dac.myfinance.client.model.DateDoubleModel;
import de.hf.dac.myfinance.client.model.InstrumentListModel;
import de.hf.dac.myfinance.client.model.InstrumentModel;
import de.hf.dac.myfinance.client.model.StringListModel;
import de.hf.dac.myfinance.client.model.TransactionListModel;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MyFinanceApi
 */
@Ignore
public class MyFinanceApiTest {

    private final MyFinanceApi api = new MyFinanceApi();

    
    /**
     * add Budget
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBudget_envID_description_budgetGroupIdTest() throws ApiException {
        String envID = null;
        String description = null;
        Integer budgetGroupId = null;
        api.addBudget_envID_description_budgetGroupId(envID, description, budgetGroupId);

        // TODO: test validations
    }
    
    /**
     * save Instrument
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCurrency_envID_currencyCode_descriptionTest() throws ApiException {
        String envID = null;
        String currencyCode = null;
        String description = null;
        api.addCurrency_envID_currencyCode_description(envID, currencyCode, description);

        // TODO: test validations
    }
    
    /**
     * save Instrument
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addEquity_envID_isin_descriptionTest() throws ApiException {
        String envID = null;
        String isin = null;
        String description = null;
        api.addEquity_envID_isin_description(envID, isin, description);

        // TODO: test validations
    }
    
    /**
     * save Giro
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addGiro_envID_description_tenantIdTest() throws ApiException {
        String envID = null;
        String description = null;
        Integer tenantId = null;
        api.addGiro_envID_description_tenantId(envID, description, tenantId);

        // TODO: test validations
    }
    
    /**
     * save Income or Expense
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addIncomeExpense_envID_description_accId_budgetId_value_transactiondateTest() throws ApiException {
        String envID = null;
        String description = null;
        Integer accId = null;
        Integer budgetId = null;
        Double value = null;
        String transactiondate = null;
        api.addIncomeExpense_envID_description_accId_budgetId_value_transactiondate(envID, description, accId, budgetId, value, transactiondate);

        // TODO: test validations
    }
    
    /**
     * save Price
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPrice_envID_currencyCode_isin_dayofprice_valueTest() throws ApiException {
        String envID = null;
        String currencyCode = null;
        String isin = null;
        String dayofprice = null;
        Double value = null;
        api.addPrice_envID_currencyCode_isin_dayofprice_value(envID, currencyCode, isin, dayofprice, value);

        // TODO: test validations
    }
    
    /**
     * save Instrument
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSymbol_envID_isin_symbol_currencycodeTest() throws ApiException {
        String envID = null;
        String isin = null;
        String symbol = null;
        String currencycode = null;
        api.addSymbol_envID_isin_symbol_currencycode(envID, isin, symbol, currencycode);

        // TODO: test validations
    }
    
    /**
     * save Tenant
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTenant_envID_descriptionTest() throws ApiException {
        String envID = null;
        String description = null;
        api.addTenant_envID_description(envID, description);

        // TODO: test validations
    }
    
    /**
     * save Transfer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTransfer_envID_description_srcId_trgId_value_transactiondateTest() throws ApiException {
        String envID = null;
        String description = null;
        Integer srcId = null;
        Integer trgId = null;
        Double value = null;
        String transactiondate = null;
        api.addTransfer_envID_description_srcId_trgId_value_transactiondate(envID, description, srcId, trgId, value, transactiondate);

        // TODO: test validations
    }
    
    /**
     * delete Transfer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void delTransfer_envID_transactionIdTest() throws ApiException {
        String envID = null;
        Integer transactionId = null;
        api.delTransfer_envID_transactionId(envID, transactionId);

        // TODO: test validations
    }
    
    /**
     * fillpricehistory
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fillPricesHistory_envID_sourceId_isinTest() throws ApiException {
        String envID = null;
        Integer sourceId = null;
        String isin = null;
        api.fillPricesHistory_envID_sourceId_isin(envID, sourceId, isin);

        // TODO: test validations
    }
    
    /**
     * List Environments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEnvironmentListTest() throws ApiException {
        StringListModel response = api.getEnvironmentList();

        // TODO: test validations
    }
    
    /**
     * List Data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstrumentForTenantList_envID_tenantTest() throws ApiException {
        String envID = null;
        Integer tenant = null;
        InstrumentListModel response = api.getInstrumentForTenantList_envID_tenant(envID, tenant);

        // TODO: test validations
    }
    
    /**
     * List Data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstrumentList_envIDTest() throws ApiException {
        String envID = null;
        InstrumentListModel response = api.getInstrumentList_envID(envID);

        // TODO: test validations
    }
    
    /**
     * List Data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstrumentPerTypeList_envID_tenant_instrumenttypeTest() throws ApiException {
        String envID = null;
        Integer tenant = null;
        String instrumenttype = null;
        InstrumentListModel response = api.getInstrumentPerTypeList_envID_tenant_instrumenttype(envID, tenant, instrumenttype);

        // TODO: test validations
    }
    
    /**
     * get Data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstrument_envID_isinTest() throws ApiException {
        String envID = null;
        String isin = null;
        InstrumentModel response = api.getInstrument_envID_isin(envID, isin);

        // TODO: test validations
    }
    
    /**
     * List Data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTenantList_envIDTest() throws ApiException {
        String envID = null;
        InstrumentListModel response = api.getTenantList_envID(envID);

        // TODO: test validations
    }
    
    /**
     * List Data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionList_envID_startdate_enddateTest() throws ApiException {
        String envID = null;
        String startdate = null;
        String enddate = null;
        TransactionListModel response = api.getTransactionList_envID_startdate_enddate(envID, startdate, enddate);

        // TODO: test validations
    }
    
    /**
     * Map Data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getValueMap_envID_instrumentId_startdate_enddateTest() throws ApiException {
        Integer instrumentId = null;
        String envID = null;
        String startdate = null;
        String enddate = null;
        DateDoubleModel response = api.getValueMap_envID_instrumentId_startdate_enddate(instrumentId, envID, startdate, enddate);

        // TODO: test validations
    }
    
    /**
     * importprices
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importPrices_envIDTest() throws ApiException {
        String envID = null;
        api.importPrices_envID(envID);

        // TODO: test validations
    }
    
    /**
     * update Instrument
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInstrument_envID_id_description_isactiveTest() throws ApiException {
        String envID = null;
        Integer id = null;
        String description = null;
        Boolean isactive = null;
        api.updateInstrument_envID_id_description_isactive(envID, id, description, isactive);

        // TODO: test validations
    }
    
}
